
# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that starts
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#       Run Query:  Ctrl-Enter (or press the play button above)
#
#   Auto Complete:  Ctrl-Space (or just start typing)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Default endpoint is an instance of https://www.graph.cool/
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



# emails[String]! - this means list cannot be null but list's element can be null
# emails[String!] - this means list can be null but list's element cannpt be null
# emails[String!]! - both them cannot be null
#
#
#


scalar Date

type Employee{
  name:String!
  emails:[String] #list
  salary(
    currency:Currency=AZN #default value
    backCode:String
  ):Float
}

enum Currency{
  AZN
  TL
}

type User{
  id: ID!
  username: String!
  password: String!
  age: Int
  gender: Gender
  createdAt: Date!
}

enum Gender{
  MALE
  FEMALE
}

query get2Countries($firstCountry:ID!,$secondCountry:ID!){
  azerbaijan:country(code:$firstCountry){
    ...countryInfo
  }
  turkey:country(code:$secondCountry){
    ...countryInfo
  }
}
fragment countryInfo on Country{
  code
  name
  phone @skip(if:true)
}
